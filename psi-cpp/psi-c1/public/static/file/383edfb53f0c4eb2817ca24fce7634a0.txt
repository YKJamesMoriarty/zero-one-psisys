//定义条件解析宏，减少重复代码
#define SAMPLE_TERAM_PARSE(obj, sql,condition) \
SqlParams params; \
sql<<" WHERE 1=1"; \
if (!obj.getID().empty()) { \
	sql << " AND `id`=?"; \
	SQLPARAMS_PUSH(params, "s", std::string, obj.getID()); \
} \
if (!obj.getCode().empty()) { \
	sql << " AND code=?"; \
	SQLPARAMS_PUSH(params,"s", std::string,  obj.getCode()); \
} \



宏： SupplierDO& obj       stringstream sql;
SAMPLE_TERAM_PARSE(obj, sql);

重新写一个宏




废代码：
SupplierDO iObj;
	list < AdvancedQuerySQLCondition> Input_condition = condition.getAdvancedQueryCondition();
	int size = Input_condition.size();
	while (size > 0)//填充领域模型DO，为SAMPLE_TERAM_PARSE和executeQueryNumerical函数做准备
	{
		if (Input_condition.front().getField() =="code")
		{
			iObj.setCode(Input_condition.front().getValue());
			Input_condition.pop_front();
			size--;
		}
		else if (Input_condition.front().getField() == "name")
		{
			iObj.setName(Input_condition.front().getValue());
			Input_condition.pop_front();
			size--;
		}
		else if (Input_condition.front().getField() == "aux_name")
		{
			iObj.setAux_Name(Input_condition.front().getValue());
			Input_condition.pop_front();
			size--;
		}
		else if (Input_condition.front().getField() == "supplier_category")
		{
			iObj.setSupplier_Category(Input_condition.front().getValue());
			Input_condition.pop_front();
			size--;
		}
		else if (Input_condition.front().getField() == "supplier_level")
		{
			iObj.setSupplier_Level(Input_condition.front().getValue());
			Input_condition.pop_front();
			size--;
		}
		else if (Input_condition.front().getField() == "tax_scale")
		{
			iObj.setTax_Scale(Input_condition.front().getValue());
			Input_condition.pop_front();
			size--;
		}
		else if (Input_condition.front().getField() == "alter_suppliers")
		{
			iObj.setAlter_Suppliers(Input_condition.front().getValue());
			Input_condition.pop_front();
			size--;
		}
		else if (Input_condition.front().getField() == "is_enabled")
		{
			int if_enable;
			if (Input_condition.front().getValue() == "1") {
				if_enable = 1;
			}
			else {
				if_enable = 0;
			}
			iObj.setIs_Enabled(if_enable);
			Input_condition.pop_front();
			size--;
		}
		else if (Input_condition.front().getField() == "remark")
		{
			iObj.setRemark(Input_condition.front().getValue());
			Input_condition.pop_front();
			size--;
		}
		else if (Input_condition.front().getField() == "invoice_company")
		{
			iObj.setInvoice_Company(Input_condition.front().getValue());
			Input_condition.pop_front();
			size--;
		}
		else if (Input_condition.front().getField() == "invoice_tax_code")
		{
			iObj.setInvoice_Tax_Code(Input_condition.front().getValue());
			Input_condition.pop_front();
			size--;
		}
		else if (Input_condition.front().getField() == "invoice_bank_name")
		{
			iObj.setInvoice_Bank_Name(Input_condition.front().getValue());
			Input_condition.pop_front();
			size--;
		}
		else if (Input_condition.front().getField() == "invoice_bank_code")
		{
			iObj.setInvoice_Bank_Code(Input_condition.front().getValue());
			Input_condition.pop_front();
			size--;
		}
		else if (Input_condition.front().getField() == "invoice_account")
		{
			iObj.setInvoice_Account(Input_condition.front().getValue());
			Input_condition.pop_front();
			size--;
		}
		else if (Input_condition.front().getField() == "invoice_phone")
		{
			iObj.setInvoice_Phone(Input_condition.front().getValue());
			Input_condition.pop_front();
			size--;
		}
		else if (Input_condition.front().getField() == "invoice_address")
		{
			iObj.setInvoice_Address(Input_condition.front().getValue());
			Input_condition.pop_front();
			size--;
		}
		else if (Input_condition.front().getField() == "receipt_company")
		{
			iObj.setReceipt_Company(Input_condition.front().getValue());
			Input_condition.pop_front();
			size--;
		}
		else if (Input_condition.front().getField() == "receipt_bank_name")
		{
		iObj.setReceipt_Bank_Name(Input_condition.front().getValue());
		Input_condition.pop_front();
		size--;
		}
		else if (Input_condition.front().getField() == "receipt_bank_code")
		{
		iObj.setReceipt_Bank_Code(Input_condition.front().getValue());
		Input_condition.pop_front();
		size--;
		}
		else if (Input_condition.front().getField() == "receipt_account")
		{
		iObj.setReceipt_Account(Input_condition.front().getValue());
		Input_condition.pop_front();
		size--;
		}
		else if (Input_condition.front().getField() == "recv_name")
		{
		iObj.setRecv_Name(Input_condition.front().getValue());
		Input_condition.pop_front();
		size--;
		}
		else if (Input_condition.front().getField() == "recv_phone")
		{
		iObj.setRecv_Phone(Input_condition.front().getValue());
		Input_condition.pop_front();
		size--;
		}
		else if (Input_condition.front().getField() == "recv_fax")
		{
		iObj.setRecv_Fax(Input_condition.front().getValue());
		Input_condition.pop_front();
		size--;
		}
		else if (Input_condition.front().getField() == "recv_email")
		{
		iObj.setRecv_Email(Input_condition.front().getValue());
		Input_condition.pop_front();
		size--;
		}
		else if (Input_condition.front().getField() == "recv_address")
		{
		iObj.setRecv_Address(Input_condition.front().getValue());
		Input_condition.pop_front();
		size--;
		}
		else if (Input_condition.front().getField() == "recv_postcode")
		{
		iObj.setRecv_Postcode(Input_condition.front().getValue());
		Input_condition.pop_front();
		size--;
		}
		else if (Input_condition.front().getField() == "fnancial_Contacts")
		{
		iObj.setFinancial_Contacts(Input_condition.front().getValue());
		Input_condition.pop_front();
		size--;
		}
		else if (Input_condition.front().getField() == "financial_phone")
		{
		iObj.setFinancial_Phone(Input_condition.front().getValue());
		Input_condition.pop_front();
		size--;
		}
		else if (Input_condition.front().getField() == "short_name")
		{
		iObj.setShort_Name(Input_condition.front().getValue());
		Input_condition.pop_front();
		size--;
		}
		else if (Input_condition.front().getField() == "website")
		{
		iObj.setWebsite(Input_condition.front().getValue());
		Input_condition.pop_front();
		size--;
		}
		else if (Input_condition.front().getField() == "legal_person")
		{
		iObj.setLegal_Person(Input_condition.front().getValue());
		Input_condition.pop_front();
		size--;
		}
		else if (Input_condition.front().getField() == "legal_person_phone")
		{
		iObj.setLegal_Person_Phone(Input_condition.front().getValue());
		Input_condition.pop_front();
		size--;
		}
		else if (Input_condition.front().getField() == "headquarters")
		{
		iObj.setHeadQuarters(Input_condition.front().getValue());
		Input_condition.pop_front();
		size--;
		}
		else if (Input_condition.front().getField() == "area")
		{
		iObj.setArea(Input_condition.front().getValue());
		Input_condition.pop_front();
		size--;
		}
		else if (Input_condition.front().getField() == "biz_area")
		{
		iObj.setBiz_Area(Input_condition.front().getValue());
		Input_condition.pop_front();
		size--;
		}
		else if (Input_condition.front().getField() == "address")
		{
		iObj.setAddress(Input_condition.front().getValue());
		Input_condition.pop_front();
		size--;
		}
		else if (Input_condition.front().getField() == "website")
		{
		iObj.setWebsite(Input_condition.front().getValue());
		Input_condition.pop_front();
		size--;
		}
	}
	SAMPLE_TERAM_PARSE(iObj, sql, condition);


废代码2：宏SAMPLE_TERAM_PARSE
//定义条件解析宏，减少重复代码
#define SAMPLE_TERAM_PARSE(obj, sql,condition) \
SqlParams params; \
sql<<" WHERE 1=1"; \
if (!obj.getID().empty()) { \
	sql << " AND `id`=?"; \
	SQLPARAMS_PUSH(params, "s", std::string, obj.getID()); \
} \
if (!obj.getCode().empty()) { \
	sql << " AND code=?"; \
	SQLPARAMS_PUSH(params,"s", std::string,  obj.getCode()); \
} \
if (obj.getName().empty()) { \
	sql << " AND name=?"; \
	SQLPARAMS_PUSH(params, "s", std::string, obj.getName()); \
}\
if (!obj.getShort_Name().empty()) { \
	sql << " AND short_name=?"; \
	SQLPARAMS_PUSH(params, "s", std::string, obj.getShort_Name()); \
} \
if (!obj.getAux_Name().empty()) { \
	sql << " AND aux_name=?"; \
	SQLPARAMS_PUSH(params, "s", std::string, obj.getAux_Name()); \
} \
if (!obj.getSupplier_Category().empty()) { \
	sql << " AND supplier_category=?"; \
	SQLPARAMS_PUSH(params, "s", std::string, obj.getSupplier_Category()); \
} \
if (!obj.getSupplier_Level().empty()) { \
	sql << " AND supplier_level=?"; \
	SQLPARAMS_PUSH(params, "s", std::string, obj.getSupplier_Level()); \
} \
if (!obj.getTax_Scale().empty()) { \
	sql << " AND tax_scale=?"; \
	SQLPARAMS_PUSH(params, "s", std::string, obj.getTax_Scale()); \
} \
if (!obj.getHeadQuarters().empty()) { \
	sql << " AND headquarters=?"; \
	SQLPARAMS_PUSH(params, "s", std::string, obj.getHeadQuarters()); \
} \
if (!obj.getArea().empty()) { \
	sql << " AND area=?"; \
	SQLPARAMS_PUSH(params, "s", std::string, obj.getArea()); \
} \
if (!obj.getBiz_Area().empty()) { \
	sql << " AND biz_area=?"; \
	SQLPARAMS_PUSH(params, "s", std::string, obj.getBiz_Area()); \
} \
if (!obj.getAddress().empty()) { \
	sql << " AND address=?"; \
	SQLPARAMS_PUSH(params, "s", std::string, obj.getAddress()); \
} \
if (!obj.getWebsite().empty()) { \
	sql << " AND website=?"; \
	SQLPARAMS_PUSH(params, "s", std::string, obj.getWebsite()); \
} \
if (!obj.getLegal_Person().empty()) { \
	sql << " AND legal_person=?"; \
	SQLPARAMS_PUSH(params, "s", std::string, obj.getLegal_Person()); \
} \
if (!obj.getLegal_Person_Phone().empty()) { \
	sql << " AND legal_person_phone=?"; \
	SQLPARAMS_PUSH(params, "s", std::string, obj.getLegal_Person_Phone()); \
} \
if (!obj.getFinancial_Contacts().empty()) { \
	sql << " AND financial_contacts=?"; \
	SQLPARAMS_PUSH(params, "s", std::string, obj.getFinancial_Contacts()); \
} \
if (!obj.getFinancial_Phone().empty()) { \
	sql << " AND financial_phone=?"; \
	SQLPARAMS_PUSH(params, "s", std::string, obj.getFinancial_Phone()); \
} \
if (!obj.getInvoice_Company().empty()) { \
	sql << " AND invoice_company=?"; \
	SQLPARAMS_PUSH(params, "s", std::string, obj.getInvoice_Company()); \
} \
if (!obj.getInvoice_Tax_Code().empty()) { \
	sql << " AND invoice_tax_code=?"; \
	SQLPARAMS_PUSH(params, "s", std::string, obj.getInvoice_Tax_Code()); \
} \
if (!obj.getInvoice_Bank_Name().empty()) { \
	sql << " AND invoice_bank_name=?"; \
	SQLPARAMS_PUSH(params, "s", std::string, obj.getInvoice_Bank_Name()); \
} \
if (!obj.getInvoice_Bank_Code().empty()) { \
	sql << " AND invoice_bank_code=?"; \
	SQLPARAMS_PUSH(params, "s", std::string, obj.getInvoice_Bank_Code()); \
} \
if (!obj.getInvoice_Account().empty()) { \
	sql << " AND invoice_account=?"; \
	SQLPARAMS_PUSH(params, "s", std::string, obj.getInvoice_Account()); \
} \
if (!obj.getInvoice_Phone().empty()) { \
	sql << " AND invoice_phone=?"; \
	SQLPARAMS_PUSH(params, "s", std::string, obj.getInvoice_Phone()); \
} \
if (!obj.getInvoice_Address().empty()) { \
	sql << " AND invoice_address=?"; \
	SQLPARAMS_PUSH(params, "s", std::string, obj.getInvoice_Address()); \
} \
if (!obj.getReceipt_Company().empty()) { \
	sql << " AND receipt_company=?"; \
	SQLPARAMS_PUSH(params, "s", std::string, obj.getReceipt_Company()); \
} \
if (!obj.getReceipt_Bank_Name().empty()) { \
	sql << " AND receipt_bank_name=?"; \
	SQLPARAMS_PUSH(params, "s", std::string, obj.getReceipt_Bank_Name()); \
} \
if (!obj.getReceipt_Bank_Code().empty()) { \
	sql << " AND receipt_bank_code=?"; \
	SQLPARAMS_PUSH(params, "s", std::string, obj.getReceipt_Bank_Code()); \
} \
if (!obj.getReceipt_Account().empty()) { \
	sql << " AND receipt_account=?"; \
	SQLPARAMS_PUSH(params, "s", std::string, obj.getReceipt_Account()); \
} \
if (!obj.getRecv_Name().empty()) { \
	sql << " AND recv_name=?"; \
	SQLPARAMS_PUSH(params, "s", std::string, obj.getRecv_Name()); \
} \
if (!obj.getRecv_Phone().empty()) { \
	sql << " AND recv_phone=?"; \
	SQLPARAMS_PUSH(params, "s", std::string, obj.getRecv_Phone()); \
} \
if (!obj.getRecv_Fax().empty()) { \
	sql << " AND recv_fax=?"; \
	SQLPARAMS_PUSH(params, "s", std::string, obj.getRecv_Fax()); \
} \
if (!obj.getRecv_Email().empty()) { \
	sql << " AND recv_email=?"; \
	SQLPARAMS_PUSH(params, "s", std::string, obj.getRecv_Email()); \
} \
if (!obj.getRecv_Address().empty()) { \
	sql << " AND recv_address=?"; \
	SQLPARAMS_PUSH(params, "s", std::string, obj.getRecv_Address()); \
} \
if (!obj.getRecv_Postcode().empty()) { \
	sql << " AND recv_postcode=?"; \
	SQLPARAMS_PUSH(params, "s", std::string, obj.getRecv_Postcode()); \
} \
if (!obj.getAttachment().empty()) { \
	sql << " AND attachment=?"; \
	SQLPARAMS_PUSH(params, "s", std::string, obj.getAttachment()); \
} \
if (!obj.getAlter_Suppliers().empty()) { \
	sql << " AND alter_suppliers=?"; \
	SQLPARAMS_PUSH(params, "s", std::string, obj.getAlter_Suppliers()); \
} \
if (!obj.getIs_Enabled()!=-1) { \
	sql << " AND is_enabled=?"; \
	SQLPARAMS_PUSH(params, "i", int, obj.getIs_Enabled()); \
} \
if (!obj.getRemark().empty()) { \
	sql << " AND remark=?"; \
	SQLPARAMS_PUSH(params, "s", std::string, obj.getRemark()); \
} \
if (!obj.getCreate_By().empty()) { \
	sql << " AND create_by=?"; \
	SQLPARAMS_PUSH(params, "s", std::string, obj.getCreate_By()); \
} \
if (!obj.getCreate_Time().empty()) { \
	sql << " AND create_time=?"; \
	SQLPARAMS_PUSH(params, "s", std::string, obj.getCreate_Time()); \
} \
if (!obj.getUpdate_Time().empty()) { \
	sql << " AND update_time=?"; \
	SQLPARAMS_PUSH(params, "s", std::string, obj.getUpdate_Time()); \
} \
if (!obj.getUpdate_By().empty()) { \
	sql << " AND update_by=?"; \
	SQLPARAMS_PUSH(params, "s", std::string, obj.getUpdate_By()); \
} \
if (!obj.getVersion()!= -1) { \
	sql << " AND version=?"; \
	SQLPARAMS_PUSH(params, "i", int, obj.getVersion()); \
} \





